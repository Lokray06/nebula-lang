package org.lokray.semantic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.lokray.ndk.dto.ClassDTO;
import org.lokray.ndk.dto.LibraryDTO;
import org.lokray.ndk.dto.MethodDTO;
import org.lokray.ndk.dto.NamespaceDTO;
import org.lokray.ndk.dto.FieldDTO;
import org.lokray.util.Debug;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

/**
 * Loads a .neblib JSON file (generated by NdkCompiler) into a Scope (globalScope).
 */
public class NebulaLibLoader
{
	public static void loadLibraryIntoScope(Path libFile, Scope globalScope) throws IOException
	{
		String json = Files.readString(libFile);
		Gson g = new GsonBuilder().create();
		LibraryDTO lib = g.fromJson(json, LibraryDTO.class);

		for (NamespaceDTO ns : lib.namespaces)
		{
			NamespaceSymbol nsSym = new NamespaceSymbol(ns.name, globalScope);
			globalScope.define(nsSym);
			loadNamespaceDTO(ns, nsSym);
		}
		Debug.logInfo("Loaded ndk library: " + libFile.getFileName());
	}

	private static void loadNamespaceDTO(NamespaceDTO dto, NamespaceSymbol parent)
	{
		for (NamespaceDTO c : dto.namespaces)
		{
			NamespaceSymbol child = new NamespaceSymbol(c.name, parent);
			parent.define(child);
			loadNamespaceDTO(c, child);
		}
		for (ClassDTO cd : dto.classes)
		{
			ClassSymbol cs = new ClassSymbol(cd.name, parent);
			parent.define(cs);
			// mark native classes: there is no modifier field in ClassSymbol yet; you can extend it.
			for (MethodDTO md : cd.methods)
			{
				MethodSymbol ms = new MethodSymbol(md.name, cs);
				cs.define(ms);
			}
			for (FieldDTO fd : cd.fields)
			{
				VariableSymbol vs = new VariableSymbol(fd.name, fd.type == null ? "Object" : fd.type);
				cs.define(vs);
			}
		}
	}
}
