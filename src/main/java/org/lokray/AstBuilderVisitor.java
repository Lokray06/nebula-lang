package org.lokray;

import org.lokray.parser.NebulaParser;
import org.lokray.parser.NebulaParserBaseVisitor;
import org.lokray.util.Debug;

/**
 * This class demonstrates how to walk the Parse Tree generated by ANTLR.
 * You'll extend this class to build your Abstract Syntax Tree (AST) and
 * later perform semantic analysis, ownership checks, etc.
 *
 * The `<Void>` generic type means that the visit methods don't return a value.
 * You could change this to return nodes of your custom AST, for example.
 */
public class AstBuilderVisitor extends NebulaParserBaseVisitor<Void> {

    private int indentLevel = 0;

    @Override
    public Void visitClassDeclaration(NebulaParser.ClassDeclarationContext ctx) {
        String className = ctx.ID().getText();
        Debug.logDebug(getIndent() + "Entering Class: " + className);

        indentLevel++;
        visitChildren(ctx); // Continue visiting children of this node
        indentLevel--;

        Debug.logDebug(getIndent() + "Exiting Class: " + className);
        return null; // Return null because our return type is Void
    }

    @Override
    public Void visitMethodDeclaration(NebulaParser.MethodDeclarationContext ctx) {
        String methodName = ctx.ID().getText();
        String returnType = ctx.type().getText();
        Debug.logDebug(getIndent() + "Found Method: " + methodName + " with return type: " + returnType);

        indentLevel++;
        // Here you would process parameters, then visit the method body (block)
        visitChildren(ctx);
        indentLevel--;

        return null;
    }

    @Override
    public Void visitFieldDeclaration(NebulaParser.FieldDeclarationContext ctx) {
        String fieldType = ctx.type().getText();
        // A single field declaration can declare multiple variables, e.g., "int x, y;"
        for (NebulaParser.VariableDeclaratorContext varCtx : ctx.variableDeclarator()) {
            String fieldName = varCtx.ID().getText();
            Debug.logDebug(getIndent() + "Found Field: " + fieldName + " of type: " + fieldType);
        }
        return visitChildren(ctx);
    }

    /**
     * Helper to create indentation for pretty printing the traversal.
     */
    private String getIndent() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < indentLevel; i++) {
            sb.append("  ");
        }
        return sb.toString();
    }
}
